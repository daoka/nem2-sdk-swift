// Copyright 2018 ProximaX Limited. All rights reserved.
// Use of this source code is governed by the Apache 2.0
// license that can be found in the LICENSE file.
//
// AccountDTO.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



class AccountDTO: Codable {

    var address: String
    var addressHeight: UInt64DTO
    var publicKey: String
    var publicKeyHeight: UInt64DTO
    var mosaics: [MosaicDTO]
    var importance: UInt64DTO
    var importanceHeight: UInt64DTO


    
    init(address: String, addressHeight: UInt64DTO, publicKey: String, publicKeyHeight: UInt64DTO, mosaics: [MosaicDTO], importance: UInt64DTO, importanceHeight: UInt64DTO) {
        self.address = address
        self.addressHeight = addressHeight
        self.publicKey = publicKey
        self.publicKeyHeight = publicKeyHeight
        self.mosaics = mosaics
        self.importance = importance
        self.importanceHeight = importanceHeight
    }
    

    // Encodable protocol methods

    func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encode(address, forKey: "address")
        try container.encode(addressHeight, forKey: "addressHeight")
        try container.encode(publicKey, forKey: "publicKey")
        try container.encode(publicKeyHeight, forKey: "publicKeyHeight")
        try container.encode(mosaics, forKey: "mosaics")
        try container.encode(importance, forKey: "importance")
        try container.encode(importanceHeight, forKey: "importanceHeight")
    }

    // Decodable protocol methods

    required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        address = try container.decode(String.self, forKey: "address")
        addressHeight = try container.decode(UInt64DTO.self, forKey: "addressHeight")
        publicKey = try container.decode(String.self, forKey: "publicKey")
        publicKeyHeight = try container.decode(UInt64DTO.self, forKey: "publicKeyHeight")
        mosaics = try container.decode([MosaicDTO].self, forKey: "mosaics")
        importance = try container.decode(UInt64DTO.self, forKey: "importance")
        importanceHeight = try container.decode(UInt64DTO.self, forKey: "importanceHeight")
    }
}

