// Copyright 2018 ProximaX Limited. All rights reserved.
// Use of this source code is governed by the Apache 2.0
// license that can be found in the LICENSE file.
//
// NodeInfoDTO.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



class NodeInfoDTO: Codable {

    var publicKey: String
    var port: Int
    var networkIdentifier: Int
    var version: Int
    var roles: Int
    var host: String
    var friendlyName: String


    
    init(publicKey: String, port: Int, networkIdentifier: Int, version: Int, roles: Int, host: String, friendlyName: String) {
        self.publicKey = publicKey
        self.port = port
        self.networkIdentifier = networkIdentifier
        self.version = version
        self.roles = roles
        self.host = host
        self.friendlyName = friendlyName
    }
    

    // Encodable protocol methods

    func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encode(publicKey, forKey: "publicKey")
        try container.encode(port, forKey: "port")
        try container.encode(networkIdentifier, forKey: "networkIdentifier")
        try container.encode(version, forKey: "version")
        try container.encode(roles, forKey: "roles")
        try container.encode(host, forKey: "host")
        try container.encode(friendlyName, forKey: "friendlyName")
    }

    // Decodable protocol methods

    required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        publicKey = try container.decode(String.self, forKey: "publicKey")
        port = try container.decode(Int.self, forKey: "port")
        networkIdentifier = try container.decode(Int.self, forKey: "networkIdentifier")
        version = try container.decode(Int.self, forKey: "version")
        roles = try container.decode(Int.self, forKey: "roles")
        host = try container.decode(String.self, forKey: "host")
        friendlyName = try container.decode(String.self, forKey: "friendlyName")
    }
}

