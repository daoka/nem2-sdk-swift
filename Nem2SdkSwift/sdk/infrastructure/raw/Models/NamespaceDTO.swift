// Copyright 2018 ProximaX Limited. All rights reserved.
// Use of this source code is governed by the Apache 2.0
// license that can be found in the LICENSE file.
//
// NamespaceDTO.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



class NamespaceDTO: Codable {

    var type: Int
    var depth: Int
    var level0: UInt64DTO
    var level1: UInt64DTO?
    var level2: UInt64DTO?
    var parentId: UInt64DTO
    var owner: String
    var ownerAddress: String?
    var startHeight: UInt64DTO
    var endHeight: UInt64DTO


    
    init(type: Int, depth: Int, level0: UInt64DTO, level1: UInt64DTO?, level2: UInt64DTO?, parentId: UInt64DTO, owner: String, ownerAddress: String?, startHeight: UInt64DTO, endHeight: UInt64DTO) {
        self.type = type
        self.depth = depth
        self.level0 = level0
        self.level1 = level1
        self.level2 = level2
        self.parentId = parentId
        self.owner = owner
        self.ownerAddress = ownerAddress
        self.startHeight = startHeight
        self.endHeight = endHeight
    }
    

    // Encodable protocol methods

    func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encode(type, forKey: "type")
        try container.encode(depth, forKey: "depth")
        try container.encode(level0, forKey: "level0")
        try container.encodeIfPresent(level1, forKey: "level1")
        try container.encodeIfPresent(level2, forKey: "level2")
        try container.encode(parentId, forKey: "parentId")
        try container.encode(owner, forKey: "owner")
        try container.encodeIfPresent(ownerAddress, forKey: "ownerAddress")
        try container.encode(startHeight, forKey: "startHeight")
        try container.encode(endHeight, forKey: "endHeight")
    }

    // Decodable protocol methods

    required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        type = try container.decode(Int.self, forKey: "type")
        depth = try container.decode(Int.self, forKey: "depth")
        level0 = try container.decode(UInt64DTO.self, forKey: "level0")
        level1 = try container.decodeIfPresent(UInt64DTO.self, forKey: "level1")
        level2 = try container.decodeIfPresent(UInt64DTO.self, forKey: "level2")
        parentId = try container.decode(UInt64DTO.self, forKey: "parentId")
        owner = try container.decode(String.self, forKey: "owner")
        ownerAddress = try container.decodeIfPresent(String.self, forKey: "ownerAddress")
        startHeight = try container.decode(UInt64DTO.self, forKey: "startHeight")
        endHeight = try container.decode(UInt64DTO.self, forKey: "endHeight")
    }
}

