// Copyright 2018 ProximaX Limited. All rights reserved.
// Use of this source code is governed by the Apache 2.0
// license that can be found in the LICENSE file.
//
// TransactionRoutesAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



class TransactionRoutesAPI {
    /**
     Announce a cosignature transaction
     
     - parameter payload: (body) The transaction [payload](https://github.com/nemtech/guidelines/blob/master/development/sdk-development.md#transaction-serialization). 
     - parameter completion: completion handler to receive the data and the error objects
     */
    //class func announceCosignatureTransaction(payload: TransactionPayload, completion: @escaping ((_ data: AnyObjectDictionary?,_ error: Error?) -> Void)) {
    class func announceCosignatureTransaction(payload: CosignatureSignedTransactionDTO, completion: @escaping ((_ data: AnyObjectDictionary?,_ error: Error?) -> Void)) {
        announceCosignatureTransactionWithRequestBuilder(payload: payload).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Announce a cosignature transaction
     - PUT /transaction/cosignature
     - Announces a [cosignature transaction](https://nemtech.github.io/concepts/aggregate-transaction.html#cosignature-transaction) to the network.  It is recommended to use the NEM2-SDK to announce transactions.
     - examples: [{contentType=application/json, example="{}"}]
     
     - parameter payload: (body) The transaction [payload](https://github.com/nemtech/guidelines/blob/master/development/sdk-development.md#transaction-serialization). 

     - returns: RequestBuilder<Any> 
     */
    //class func announceCosignatureTransactionWithRequestBuilder(payload: TransactionPayload) -> RequestBuilder<AnyObjectDictionary> {
    class func announceCosignatureTransactionWithRequestBuilder(payload: CosignatureSignedTransactionDTO) -> RequestBuilder<AnyObjectDictionary> {
        let path = "/transaction/cosignature"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: payload)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<AnyObjectDictionary>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Announce an aggregate bonded transaction
     
     - parameter payload: (body) The transaction [payload](https://github.com/nemtech/guidelines/blob/master/development/sdk-development.md#transaction-serialization). 
     - parameter completion: completion handler to receive the data and the error objects
     */
    class func announcePartialTransaction(payload: TransactionPayload, completion: @escaping ((_ data: AnyObjectDictionary?,_ error: Error?) -> Void)) {
        announcePartialTransactionWithRequestBuilder(payload: payload).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Announce an aggregate bonded transaction
     - PUT /transaction/partial
     - Announces an [aggregate bonded transaction](https://nemtech.github.io/concepts/aggregate-transaction.html#aggregate-bonded) to the network.
     - examples: [{contentType=application/json, example="{}"}]
     
     - parameter payload: (body) The transaction [payload](https://github.com/nemtech/guidelines/blob/master/development/sdk-development.md#transaction-serialization). 

     - returns: RequestBuilder<Any> 
     */
    class func announcePartialTransactionWithRequestBuilder(payload: TransactionPayload) -> RequestBuilder<AnyObjectDictionary> {
        let path = "/transaction/partial"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: payload)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<AnyObjectDictionary>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Announce a new transaction
     
     - parameter payload: (body) The transaction [payload](https://github.com/nemtech/guidelines/blob/master/development/sdk-development.md#transaction-serialization). 
     - parameter completion: completion handler to receive the data and the error objects
     */
    class func announceTransaction(payload: TransactionPayload, completion: @escaping ((_ data: AnyObjectDictionary?,_ error: Error?) -> Void)) {
        announceTransactionWithRequestBuilder(payload: payload).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Announce a new transaction
     - PUT /transaction
     - Announces a [transaction](https://nemtech.github.io/concepts/transaction.html) to the network. It is recommended to use the NEM2-SDK to announce transactions.
     - examples: [{contentType=application/json, example="{}"}]
     
     - parameter payload: (body) The transaction [payload](https://github.com/nemtech/guidelines/blob/master/development/sdk-development.md#transaction-serialization). 

     - returns: RequestBuilder<Any> 
     */
    class func announceTransactionWithRequestBuilder(payload: TransactionPayload) -> RequestBuilder<AnyObjectDictionary> {
        let path = "/transaction"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: payload)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<AnyObjectDictionary>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Get transaction information
     
     - parameter transactionId: (path) The transaction id or hash. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    class func getTransaction(transactionId: String, completion: @escaping ((_ data: AnyObjectDictionary?,_ error: Error?) -> Void)) {
        getTransactionWithRequestBuilder(transactionId: transactionId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get transaction information
     - GET /transaction/{transactionId}
     - Returns transaction information given a transactionId or hash.
     - examples: [{contentType=application/json, example="{}"}]
     
     - parameter transactionId: (path) The transaction id or hash. 

     - returns: RequestBuilder<Any> 
     */
    class func getTransactionWithRequestBuilder(transactionId: String) -> RequestBuilder<AnyObjectDictionary> {
        var path = "/transaction/{transactionId}"
        path = path.replacingOccurrences(of: "{transactionId}", with: "\(transactionId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<AnyObjectDictionary>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get transaction status
     
     - parameter hash: (path) The transaction hash. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    class func getTransactionStatus(hash: String, completion: @escaping ((_ data: TransactionStatusDTO?,_ error: Error?) -> Void)) {
        getTransactionStatusWithRequestBuilder(hash: hash).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get transaction status
     - GET /transaction/{hash}/status
     - Returns the transaction status for a given hash.
     - examples: [{contentType=application/json, example={
  "deadline" : "",
  "hash" : "hash",
  "group" : "group",
  "status" : "status",
  "height" : ""
}}]
     
     - parameter hash: (path) The transaction hash. 

     - returns: RequestBuilder<TransactionStatusDTO> 
     */
    class func getTransactionStatusWithRequestBuilder(hash: String) -> RequestBuilder<TransactionStatusDTO> {
        var path = "/transaction/{hash}/status"
        path = path.replacingOccurrences(of: "{hash}", with: "\(hash)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<TransactionStatusDTO>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get transactions information
     
     - parameter transactionIds: (body) An array of transaction ids or hashes. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    class func getTransactions(transactionIds: TransactionIds, completion: @escaping ((_ data: [AnyObjectDictionary]?,_ error: Error?) -> Void)) {
        getTransactionsWithRequestBuilder(transactionIds: transactionIds).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get transactions information
     - POST /transaction
     - Returns transactions information for a given array of transactionIds.
     - examples: [{contentType=application/json, example=[ "{}", "{}" ]}]
     
     - parameter transactionIds: (body) An array of transaction ids or hashes. 

     - returns: RequestBuilder<[Any]> 
     */
    class func getTransactionsWithRequestBuilder(transactionIds: TransactionIds) -> RequestBuilder<[AnyObjectDictionary]> {
        let path = "/transaction"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: transactionIds)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[AnyObjectDictionary]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Get transactions status.
     
     - parameter transactionHashes: (body) An array of transaction hashes. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    class func getTransactionsStatuses(transactionHashes: TransactionHashes, completion: @escaping ((_ data: [TransactionStatusDTO]?,_ error: Error?) -> Void)) {
        getTransactionsStatusesWithRequestBuilder(transactionHashes: transactionHashes).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get transactions status.
     - POST /transaction/statuses
     - Returns an array of transaction statuses for a given array of transaction hashes.
     - examples: [{contentType=application/json, example=[ {
  "deadline" : "",
  "hash" : "hash",
  "group" : "group",
  "status" : "status",
  "height" : ""
}, {
  "deadline" : "",
  "hash" : "hash",
  "group" : "group",
  "status" : "status",
  "height" : ""
} ]}]
     
     - parameter transactionHashes: (body) An array of transaction hashes. 

     - returns: RequestBuilder<[TransactionStatusDTO]> 
     */
    class func getTransactionsStatusesWithRequestBuilder(transactionHashes: TransactionHashes) -> RequestBuilder<[TransactionStatusDTO]> {
        let path = "/transaction/statuses"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: transactionHashes)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[TransactionStatusDTO]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
