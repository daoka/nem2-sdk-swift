// Copyright 2018 ProximaX Limited. All rights reserved.
// Use of this source code is governed by the Apache 2.0
// license that can be found in the LICENSE file.
//
// MosaicRoutesAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



class MosaicRoutesAPI {
    /**
     Get mosaic information
     
     - parameter mosaicId: (path) The mosaic identifier. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    class func getMosaic(mosaicId: String, completion: @escaping ((_ data: MosaicInfoDTO?,_ error: Error?) -> Void)) {
        getMosaicWithRequestBuilder(mosaicId: mosaicId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get mosaic information
     - GET /mosaic/{mosaicId}
     - Gets the mosaic definition for a given mosaicId.
     - examples: [{contentType=application/json, example={
  "meta" : {
    "active" : true,
    "index" : 0,
    "id" : "id"
  },
  "mosaic" : {
    "owner" : "owner",
    "namespaceId" : "",
    "mosaicId" : "",
    "supply" : "",
    "properties" : "",
    "levy" : "{}",
    "height" : ""
  }
}}]
     
     - parameter mosaicId: (path) The mosaic identifier. 

     - returns: RequestBuilder<MosaicInfoDTO> 
     */
    class func getMosaicWithRequestBuilder(mosaicId: String) -> RequestBuilder<MosaicInfoDTO> {
        var path = "/mosaic/{mosaicId}"
        path = path.replacingOccurrences(of: "{mosaicId}", with: "\(mosaicId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<MosaicInfoDTO>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get mosaics information for an array of mosaics
     
     - parameter mosaicIds: (body) An array of mosaicIds. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    class func getMosaics(mosaicIds: MosaicIds, completion: @escaping ((_ data: [MosaicInfoDTO]?,_ error: Error?) -> Void)) {
        getMosaicsWithRequestBuilder(mosaicIds: mosaicIds).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get mosaics information for an array of mosaics
     - POST /mosaic
     - Gets an array of mosaic definition.
     - examples: [{contentType=application/json, example=[ {
  "meta" : {
    "active" : true,
    "index" : 0,
    "id" : "id"
  },
  "mosaic" : {
    "owner" : "owner",
    "namespaceId" : "",
    "mosaicId" : "",
    "supply" : "",
    "properties" : "",
    "levy" : "{}",
    "height" : ""
  }
}, {
  "meta" : {
    "active" : true,
    "index" : 0,
    "id" : "id"
  },
  "mosaic" : {
    "owner" : "owner",
    "namespaceId" : "",
    "mosaicId" : "",
    "supply" : "",
    "properties" : "",
    "levy" : "{}",
    "height" : ""
  }
} ]}]
     
     - parameter mosaicIds: (body) An array of mosaicIds. 

     - returns: RequestBuilder<[MosaicInfoDTO]> 
     */
    class func getMosaicsWithRequestBuilder(mosaicIds: MosaicIds) -> RequestBuilder<[MosaicInfoDTO]> {
        let path = "/mosaic"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: mosaicIds)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[MosaicInfoDTO]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Get mosaics information for a given namespace.
     
     - parameter namespaceId: (path) The namespace identifier. 
     - parameter pageSize: (query) The number of mosaics to return. (optional)
     - parameter id: (query) The mosaic id up to which mosaic definitions are returned. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    class func getMosaicsFromNamespace(namespaceId: String, pageSize: Int? = nil, id: String? = nil, completion: @escaping ((_ data: [MosaicInfoDTO]?,_ error: Error?) -> Void)) {
        getMosaicsFromNamespaceWithRequestBuilder(namespaceId: namespaceId, pageSize: pageSize, id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get mosaics information for a given namespace.
     - GET /namespace/{namespaceId}/mosaics
     - Gets an array of mosaic definition from mosaics created under the provided namespace.
     - examples: [{contentType=application/json, example=[ {
  "meta" : {
    "active" : true,
    "index" : 0,
    "id" : "id"
  },
  "mosaic" : {
    "owner" : "owner",
    "namespaceId" : "",
    "mosaicId" : "",
    "supply" : "",
    "properties" : "",
    "levy" : "{}",
    "height" : ""
  }
}, {
  "meta" : {
    "active" : true,
    "index" : 0,
    "id" : "id"
  },
  "mosaic" : {
    "owner" : "owner",
    "namespaceId" : "",
    "mosaicId" : "",
    "supply" : "",
    "properties" : "",
    "levy" : "{}",
    "height" : ""
  }
} ]}]
     
     - parameter namespaceId: (path) The namespace identifier. 
     - parameter pageSize: (query) The number of mosaics to return. (optional)
     - parameter id: (query) The mosaic id up to which mosaic definitions are returned. (optional)

     - returns: RequestBuilder<[MosaicInfoDTO]> 
     */
    class func getMosaicsFromNamespaceWithRequestBuilder(namespaceId: String, pageSize: Int? = nil, id: String? = nil) -> RequestBuilder<[MosaicInfoDTO]> {
        var path = "/namespace/{namespaceId}/mosaics"
        path = path.replacingOccurrences(of: "{namespaceId}", with: "\(namespaceId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "pageSize": pageSize?.encodeToJSON(), 
            "id": id
        ])
        

        let requestBuilder: RequestBuilder<[MosaicInfoDTO]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get readable names for a set of mosaics
     
     - parameter mosaicIds: (body) An array of mosaicIds. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    class func getMosaicsName(mosaicIds: MosaicIds, completion: @escaping ((_ data: [MosaicNameDTO]?,_ error: Error?) -> Void)) {
        getMosaicsNameWithRequestBuilder(mosaicIds: mosaicIds).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get readable names for a set of mosaics
     - POST /mosaic/names
     - Returns friendly names for mosaics.
     - examples: [{contentType=application/json, example=[ {
  "name" : "name",
  "mosaicId" : "",
  "parentId" : ""
}, {
  "name" : "name",
  "mosaicId" : "",
  "parentId" : ""
} ]}]
     
     - parameter mosaicIds: (body) An array of mosaicIds. 

     - returns: RequestBuilder<[MosaicNameDTO]> 
     */
    class func getMosaicsNameWithRequestBuilder(mosaicIds: MosaicIds) -> RequestBuilder<[MosaicNameDTO]> {
        let path = "/mosaic/names"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: mosaicIds)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[MosaicNameDTO]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
