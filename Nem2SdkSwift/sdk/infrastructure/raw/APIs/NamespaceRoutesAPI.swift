// Copyright 2018 ProximaX Limited. All rights reserved.
// Use of this source code is governed by the Apache 2.0
// license that can be found in the LICENSE file.
//
// NamespaceRoutesAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



class NamespaceRoutesAPI {
    /**
     Get namespace information
     
     - parameter namespaceId: (path) The namespace identifier. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    class func getNamespace(namespaceId: String, completion: @escaping ((_ data: NamespaceInfoDTO?,_ error: Error?) -> Void)) {
        getNamespaceWithRequestBuilder(namespaceId: namespaceId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get namespace information
     - GET /namespace/{namespaceId}
     - Gets the namespace for a given namespaceId.
     - examples: [{contentType=application/json, example={
  "meta" : {
    "active" : true,
    "index" : 0,
    "id" : "id"
  },
  "namespace" : {
    "owner" : "owner",
    "depth" : 6,
    "ownerAddress" : "ownerAddress",
    "type" : 0,
    "level1" : "",
    "level0" : "",
    "parentId" : "",
    "startHeight" : "",
    "level2" : "",
    "endHeight" : ""
  }
}}]
     
     - parameter namespaceId: (path) The namespace identifier. 

     - returns: RequestBuilder<NamespaceInfoDTO> 
     */
    class func getNamespaceWithRequestBuilder(namespaceId: String) -> RequestBuilder<NamespaceInfoDTO> {
        var path = "/namespace/{namespaceId}"
        path = path.replacingOccurrences(of: "{namespaceId}", with: "\(namespaceId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<NamespaceInfoDTO>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get namespaces owned by an account
     
     - parameter accountId: (path) The address or key of the account.
     - parameter pageSize: (query) The number of namespaces to return. (optional)
     - parameter id: (query) The namespace id up to which namespace objects are returned. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    class func getNamespacesFromAccount(accountId: String, pageSize: Int? = nil, id: String? = nil, completion: @escaping ((_ data: [NamespaceInfoDTO]?,_ error: Error?) -> Void)) {
        getNamespacesFromAccountWithRequestBuilder(accountId: accountId, pageSize: pageSize, id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get namespaces owned by an account
     - GET /account/{accountId}/namespaces
     - Gets an array of namespaces for a given account address.
     - examples: [{contentType=application/json, example=[ {
  "meta" : {
    "active" : true,
    "index" : 0,
    "id" : "id"
  },
  "namespace" : {
    "owner" : "owner",
    "depth" : 6,
    "ownerAddress" : "ownerAddress",
    "type" : 0,
    "level1" : "",
    "level0" : "",
    "parentId" : "",
    "startHeight" : "",
    "level2" : "",
    "endHeight" : ""
  }
}, {
  "meta" : {
    "active" : true,
    "index" : 0,
    "id" : "id"
  },
  "namespace" : {
    "owner" : "owner",
    "depth" : 6,
    "ownerAddress" : "ownerAddress",
    "type" : 0,
    "level1" : "",
    "level0" : "",
    "parentId" : "",
    "startHeight" : "",
    "level2" : "",
    "endHeight" : ""
  }
} ]}]
     
     - parameter accountId: (path) The address or key of the account.
     - parameter pageSize: (query) The number of namespaces to return. (optional)
     - parameter id: (query) The namespace id up to which namespace objects are returned. (optional)

     - returns: RequestBuilder<[NamespaceInfoDTO]> 
     */
    class func getNamespacesFromAccountWithRequestBuilder(accountId: String, pageSize: Int? = nil, id: String? = nil) -> RequestBuilder<[NamespaceInfoDTO]> {
        var path = "/account/{accountId}/namespaces"
        path = path.replacingOccurrences(of: "{accountId}", with: "\(accountId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "pageSize": pageSize?.encodeToJSON(), 
            "id": id
        ])
        

        let requestBuilder: RequestBuilder<[NamespaceInfoDTO]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get namespaces for given array of addresses
     
     - parameter addresses: (body) An array of addresses. 
     - parameter pageSize: (query) The number of namespaces to return. (optional)
     - parameter id: (query) The namespace id up to which namespace objects are returned. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    class func getNamespacesFromAccounts(addresses: Addresses, pageSize: Int? = nil, id: String? = nil, completion: @escaping ((_ data: [NamespaceInfoDTO]?,_ error: Error?) -> Void)) {
        getNamespacesFromAccountsWithRequestBuilder(addresses: addresses, pageSize: pageSize, id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get namespaces for given array of addresses
     - POST /account/namespaces
     - Gets namespaces for a given array of addresses.
     - examples: [{contentType=application/json, example=[ {
  "meta" : {
    "active" : true,
    "index" : 0,
    "id" : "id"
  },
  "namespace" : {
    "owner" : "owner",
    "depth" : 6,
    "ownerAddress" : "ownerAddress",
    "type" : 0,
    "level1" : "",
    "level0" : "",
    "parentId" : "",
    "startHeight" : "",
    "level2" : "",
    "endHeight" : ""
  }
}, {
  "meta" : {
    "active" : true,
    "index" : 0,
    "id" : "id"
  },
  "namespace" : {
    "owner" : "owner",
    "depth" : 6,
    "ownerAddress" : "ownerAddress",
    "type" : 0,
    "level1" : "",
    "level0" : "",
    "parentId" : "",
    "startHeight" : "",
    "level2" : "",
    "endHeight" : ""
  }
} ]}]
     
     - parameter addresses: (body) An array of addresses. 
     - parameter pageSize: (query) The number of namespaces to return. (optional)
     - parameter id: (query) The namespace id up to which namespace objects are returned. (optional)

     - returns: RequestBuilder<[NamespaceInfoDTO]> 
     */
    class func getNamespacesFromAccountsWithRequestBuilder(addresses: Addresses, pageSize: Int? = nil, id: String? = nil) -> RequestBuilder<[NamespaceInfoDTO]> {
        let path = "/account/namespaces"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: addresses)

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "pageSize": pageSize?.encodeToJSON(), 
            "id": id
        ])
        

        let requestBuilder: RequestBuilder<[NamespaceInfoDTO]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Get readable names for a set of namespaces
     
     - parameter namespaceIds: (body) An array of namespaceIds. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    class func getNamespacesNames(namespaceIds: NamespaceIds, completion: @escaping ((_ data: [NamespaceNameDTO]?,_ error: Error?) -> Void)) {
        getNamespacesNamesWithRequestBuilder(namespaceIds: namespaceIds).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get readable names for a set of namespaces
     - POST /namespace/names
     - Returns friendly names for mosaics.
     - examples: [{contentType=application/json, example=[ {
  "namespaceId" : "",
  "name" : "name",
  "parentId" : ""
}, {
  "namespaceId" : "",
  "name" : "name",
  "parentId" : ""
} ]}]
     
     - parameter namespaceIds: (body) An array of namespaceIds. 

     - returns: RequestBuilder<[NamespaceNameDTO]> 
     */
    class func getNamespacesNamesWithRequestBuilder(namespaceIds: NamespaceIds) -> RequestBuilder<[NamespaceNameDTO]> {
        let path = "/namespace/names"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: namespaceIds)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[NamespaceNameDTO]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
